{"version":3,"file":"static/webpack/static/development/pages/index.js.d8aa1f13ad19db8d45ac.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { useState } from 'react'\nimport { useRouter } from 'next/router'\n\n\nvar helper = function (rgb) { \n    var hex = Number(rgb).toString(16);\n    if (hex.length < 2) {\n         hex = \"0\" + hex;\n    }\n    return hex;\n  };\n\nvar rgbToHex = function(r,g,b) {   \n    var red = helper(r);\n    var green = helper(g);\n    var blue = helper(b);\n    return red+green+blue;\n};\n\n\nfunction HEX2RGB (hex) {\n    \"use strict\";\n    if (hex.charAt(0) === '#') {\n        hex = hex.substr(1);\n    }\n    if ((hex.length < 2) || (hex.length > 6)) {\n        return false;\n    }\n    var values = hex.split(''),\n        r,\n        g,\n        b;\n\n    if (hex.length === 2) {\n        r = parseInt(values[0].toString() + values[1].toString(), 16);\n        g = r;\n        b = r;\n    } else if (hex.length === 3) {\n        r = parseInt(values[0].toString() + values[0].toString(), 16);\n        g = parseInt(values[1].toString() + values[1].toString(), 16);\n        b = parseInt(values[2].toString() + values[2].toString(), 16);\n    } else if (hex.length === 6) {\n        r = parseInt(values[0].toString() + values[1].toString(), 16);\n        g = parseInt(values[2].toString() + values[3].toString(), 16);\n        b = parseInt(values[4].toString() + values[5].toString(), 16);\n    } else {\n        return false;\n    }\n    return [r, g, b];\n}\n\n\nexport default function Index() {\n    const router = useRouter()\n    const [rValue, setRValue] = useState(0)\n    const [gValue, setGValue] = useState(0)\n    const [bValue, setBValue] = useState(0)\n    const [theHex, setTheHex] = useState(\"FFFFFF\")\n    const [theRGB, setTheRGB] = useState()\n    const [theColor, setTheColor] = useState()\n\n    const setDefault = () => {\n        setRValue(\"\")\n        setGValue(\"\")\n        setBValue(\"\")\n        setTheHex(\"\")\n\n        setTheColor({background: \"#FFFFFF\"})\n        \n    }\n\n    const setRGB = (str) => {\n        const result = HEX2RGB(str)\n        setRValue(result[0])\n        setGValue(result[1])\n        setBValue(result[2])\n\n        setTheHex(str)\n        setTheColor({background: \"#\" + str})\n\n    }\n\n    const setHEX = (r,g,b) => {\n        const result = rgbToHex(r,g,b)\n\n        setRValue(r)\n        setGValue(g)\n        setBValue(b)\n\n        setTheHex(result)\n        setTheColor({background: \"#\" + result})\n\n    }\n\n    // const updateValue = (r, g, b, hex) => {\n    //     const rgbValue = HEX2RGB(hex)\n\n    //     setRValue(rgbValue[0])\n    //     setGValue(rgbValue[1])\n    //     setBValue(rgbValue[2])\n\n    // }\n\n    return (\n      <div style={theColor}>\n        {router.query.hex}\n        <p>Hello Next.js</p>\n\n        <p>Red </p> {rValue}\n        <input \n        type=\"text\"\n        placeholder = \"Enter Red value\"\n        value = {rValue}\n        maxLength = \"3\"\n        onChange = {(e) => {\n            if (e.target.value) {\n                setHEX(e.target.value, gValue, bValue)\n            } else {\n\n                setDefault()\n            }\n        }\n        }\n        />\n\n        <p>Green </p> {gValue}\n        <input \n        type=\"text\"\n        placeholder = \"Enter Green value\"\n        value = {gValue}\n        maxLength = \"3\"\n        onChange = {(e) => {\n            if (e.target.value) {\n                setHEX(rValue, e.target.value, bValue)\n            } else {\n                setDefault()\n            }\n        }\n        }\n        />\n\n        <p>Blue </p> {bValue}\n        <input \n        type=\"text\"\n        placeholder = \"Enter Blue value\"\n        value = {bValue}\n        maxLength = \"3\"\n        onChange = {(e) => {\n            if (e.target.value) {\n                setHEX(rValue, gValue, e.target.value)\n            } else {\n                setDefault()\n            }\n        }\n        }\n        />\n\n\n        <br/>\n        <br/>\n    \n        <p>Hex Value </p>{theHex}\n        <input \n        type=\"text\"\n        placeholder = \"Enter value\"\n        maxLength = \"6\"\n        value = {router.query.hex ? router.query.hex : theHex}\n        \n        onChange = {(e) => {\n            if (e.target.value) {\n                setRGB(e.target.value)\n            } else {\n                setDefault()\n            }\n            \n        }\n        }\n        />\n        \n\n\n    \n      </div>\n    );\n  }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;;;;A","sourceRoot":""}