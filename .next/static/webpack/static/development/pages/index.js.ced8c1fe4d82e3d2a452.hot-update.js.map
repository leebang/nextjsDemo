{"version":3,"file":"static/webpack/static/development/pages/index.js.ced8c1fe4d82e3d2a452.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["\n\n\nimport { useState } from 'react'\n\n\n\n\n\n\nconst RGB_HEX = /^#?(?:([\\da-f]{3})[\\da-f]?|([\\da-f]{6})(?:[\\da-f]{2})?)$/i;\n\n\nfunction HEX2RGB (hex) {\n    \"use strict\";\n    if (hex.charAt(0) === '#') {\n        hex = hex.substr(1);\n    }\n    if ((hex.length < 2) || (hex.length > 6)) {\n        return false;\n    }\n    var values = hex.split(''),\n        r,\n        g,\n        b;\n\n    if (hex.length === 2) {\n        r = parseInt(values[0].toString() + values[1].toString(), 16);\n        g = r;\n        b = r;\n    } else if (hex.length === 3) {\n        r = parseInt(values[0].toString() + values[0].toString(), 16);\n        g = parseInt(values[1].toString() + values[1].toString(), 16);\n        b = parseInt(values[2].toString() + values[2].toString(), 16);\n    } else if (hex.length === 6) {\n        r = parseInt(values[0].toString() + values[1].toString(), 16);\n        g = parseInt(values[2].toString() + values[3].toString(), 16);\n        b = parseInt(values[4].toString() + values[5].toString(), 16);\n    } else {\n        return false;\n    }\n    return [r, g, b];\n}\n\n\n\n\n\nexport default function Index() {\n\n\n\n    const [rValue, setRValue] = useState()\n    const [gValue, setGValue] = useState()\n    const [bValue, setBValue] = useState()\n    const [theHex, setTheHex] = useState(\"F8F8F8\")\n\n    const setRBG = (str) => {\n        const result = HEX2RGB(str)\n        setRValue(result[0]);\n        setGValue(result[1]);\n        setBValue(result[2]);\n\n        setTheHex({background: \"#\" + str})\n        \n\n        \n    }\n\n    return (\n      <div style={linkStyle}>\n        <p>Hello Next.js</p>\n\n        <p>Red</p>\n        {rValue}\n\n        <p>Green</p>\n        {gValue}\n\n        <p>Blue</p>\n        {bValue}\n\n        <input \n        type=\"text\"\n        placeholder = \"Enter R value\"\n        onChange = {(e) => setRBG(e.target.value)}\n        />\n        \n    \n      </div>\n    );\n  }"],"mappings":";;;;;;;;;;;;;;;;;AAGA;AAOA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;A","sourceRoot":""}